name: Manual Workflow with User Restriction, Commit ID, and Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy to (e.g., staging or production)'
        required: true
        default: 'staging'
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      commit_id:
        description: 'Commit ID to rollback to (leave empty for the latest commit)'
        required: false
        default: ''  # If not specified, it will deploy the latest commit

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Print GitHub Actor (GitHub username)
      run: |
        echo "GitHub Username (actor): ${{ github.actor }}"

    # - name: Fetch Git user name from Git config
    #   run: |
    #     # Fetch the configured Git user name
    #     GIT_USER_NAME=$(git config user.name)
    #     echo "Git User Name: $GIT_USER_NAME"
    
    # - name: Print both GitHub username and Git user name
    #   run: |
    #     # Print both the GitHub actor and the Git user name
    #     echo "GitHub Username (actor): ${{ github.actor }}"
    #     echo "Git User Name: $GIT_USER_NAME"
    
    - name: Check if user is authorized
      run: |
        # Define allowed users (GitHub usernames)
        ALLOWED_USERS=("user1" "user2" "user3")
        
        # Check if the current user (github.actor) is in the allowed users list
        if [[ ! " ${ALLOWED_USERS[@]} " =~ " ${GITHUB_ACTOR} " ]]; then
          echo "You are not authorized to trigger this workflow."
          exit 1  # Fail the job if the user is not authorized
        fi
        
    - name: Validate commit_id (if provided)
      run: |
        # If a commit_id is provided, validate that it is a valid commit hash
        if [[ -n "${{ github.event.inputs.commit_id }}" ]]; then
          COMMIT_ID="${{ github.event.inputs.commit_id }}"
          echo "Validating commit ID: $COMMIT_ID"
          # Check if commit_id is a valid git commit hash (basic validation)
          if [[ ! "$COMMIT_ID" =~ ^[0-9a-f]{40}$ ]]; then
            echo "Invalid commit ID: $COMMIT_ID. It must be a valid 40-character commit hash."
            exit 1
          fi
        fi
      
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: 'main'  # Checkout the 'main' branch (you can modify this if using a different branch)

    - name: Get Git commit ID
      run: |
        # Retrieve the current commit ID
        COMMIT_ID=$(git rev-parse HEAD)
        echo "Git Commit ID: $COMMIT_ID"
        echo "COMMIT_ID=$COMMIT_ID" >> $GITHUB_ENV  # Store commit ID in environment variable
        
    - name: Retrieve last deployment history (if available)
      id: deployment_history
      run: |
        # Check if a deployment history file exists
        if [[ -f deployment-history.txt ]]; then
          # Read the last deployment details
          LAST_COMMIT=$(head -n 1 deployment-history.txt)
          LAST_ENVIRONMENT=$(sed -n '2p' deployment-history.txt)
          LAST_VERSION=$(sed -n '3p' deployment-history.txt)
          echo "Last deployed commit: $LAST_COMMIT"
          echo "Last deployed environment: $LAST_ENVIRONMENT"
          echo "Last deployed version: $LAST_VERSION"
          
          # Check if the current trigger matches the last deployment
          if [[ "$LAST_COMMIT" == "$COMMIT_ID" && "$LAST_ENVIRONMENT" == "${{ github.event.inputs.environment }}" && "$LAST_VERSION" == "${{ github.event.inputs.version }}" ]]; then
            echo "This deployment is identical to the previous one. Skipping deployment."
            exit 0  # Exit if there is no difference in commit, environment, and version
          fi
        else
          echo "No previous deployment found. Proceeding with deployment."
        fi
        
    - name: Rollback to specified commit (if any)
      run: |
        # If a commit_id is provided, use that to checkout the commit
        if [[ -n "${{ github.event.inputs.commit_id }}" ]]; then
          echo "Rolling back to commit ID: ${{ github.event.inputs.commit_id }}"
          git checkout ${{ github.event.inputs.commit_id }}  # Checkout the specified commit
        else
          echo "No commit ID provided. Using the latest commit: $COMMIT_ID"
        fi

    - name: Print input values and commit ID
      run: |
        echo "Deploying to environment: ${{ github.event.inputs.environment }}"
        echo "Deploying version: ${{ github.event.inputs.version }}"
        echo "Git Commit ID: ${{ env.COMMIT_ID }}"  # Access the commit ID from the environment variable
        echo "Triggered by user: ${{ github.actor }}"  # Print the username who triggered the workflow

    - name: Deploy application (or run your deployment steps)
      run: |
        echo "Deploying application..."
        # Add your deployment commands here, e.g.:
        # npm install
        # npm run build
        # kubectl apply -f deployment.yaml

    # Additional rollback or deployment steps can go here
